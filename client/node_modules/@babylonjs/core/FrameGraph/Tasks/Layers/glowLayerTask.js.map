{"version":3,"file":"glowLayerTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/Layers/glowLayerTask.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\r\n    FrameGraph,\r\n    FrameGraphTextureHandle,\r\n    Scene,\r\n    IThinGlowLayerOptions,\r\n    Camera,\r\n    FrameGraphObjectList,\r\n    FrameGraphTextureCreationOptions,\r\n    Effect,\r\n    ThinBlurPostProcess,\r\n    AbstractEngine,\r\n    // eslint-disable-next-line import/no-internal-modules\r\n} from \"core/index\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { ThinGlowLayer } from \"core/Layers/thinGlowLayer\";\r\nimport { FrameGraphObjectRendererTask } from \"../Rendering/objectRendererTask\";\r\nimport { FrameGraphClearTextureTask } from \"../Texture/clearTextureTask\";\r\nimport { FrameGraphBlurTask } from \"../PostProcesses/blurTask\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FrameGraphTextureManager } from \"../../frameGraphTextureManager\";\r\nimport { getDimensionsFromTextureSize } from \"../../../Materials/Textures/textureCreationOptions\";\r\n\r\n/**\r\n * Task which applies a glowing effect to a texture.\r\n */\r\nexport class FrameGraphGlowLayerTask extends FrameGraphTask {\r\n    /**\r\n     * The destination texture to apply the glow layer to.\r\n     * The glow effect will be blended with the contents of this texture.\r\n     */\r\n    public destinationTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The layer texture to render the glow layer to.\r\n     * If not provided, a default texture will be created.\r\n     */\r\n    public layerTexture?: FrameGraphTextureHandle;\r\n\r\n    private _camera: Camera;\r\n    /**\r\n     * Gets or sets the camera used to render the objects to the glow layer.\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: Camera) {\r\n        this._camera = camera;\r\n        this.layer.camera = this.camera;\r\n    }\r\n\r\n    /**\r\n     * The list of objects to render to the glow layer.\r\n     */\r\n    public objectList: FrameGraphObjectList;\r\n\r\n    /**\r\n     * The output texture of the task (same as destinationTexture, but the handle will be different).\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The glow layer object. Use this object to update the glow layer properties (e.g. intensity, blur kernel size).\r\n     */\r\n    public readonly layer: ThinGlowLayer;\r\n\r\n    /**\r\n     * The name of the task.\r\n     */\r\n    public override get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public override set name(name: string) {\r\n        this._name = name;\r\n        if (this._blurX) {\r\n            for (let i = 0; i < this._blurX.length; i++) {\r\n                this._blurX[i].name = `${name} Blur X${i}`;\r\n                this._blurY[i].name = `${name} Blur Y${i}`;\r\n            }\r\n        }\r\n\r\n        if (this._clearTask) {\r\n            this._clearTask.name = name + \" Clear Layer\";\r\n        }\r\n\r\n        if (this._objectRendererTask) {\r\n            this._objectRendererTask.name = name + \" Render to Layer\";\r\n        }\r\n    }\r\n\r\n    private readonly _engine: AbstractEngine;\r\n    private readonly _clearTask: FrameGraphClearTextureTask;\r\n    private readonly _objectRendererTask: FrameGraphObjectRendererTask;\r\n    private readonly _blurX: FrameGraphBlurTask[] = [];\r\n    private readonly _blurY: FrameGraphBlurTask[] = [];\r\n\r\n    /**\r\n     * Constructs a new glow layer task.\r\n     * @param name Name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     * @param scene The scene to render the glow layer in.\r\n     * @param options Options for the glow layer.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene, options?: IThinGlowLayerOptions) {\r\n        super(name, frameGraph);\r\n\r\n        this._engine = scene.getEngine();\r\n\r\n        this.layer = new ThinGlowLayer(name, scene, options, true);\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            this._blurX.push(new FrameGraphBlurTask(`${name} Blur X${i}`, this._frameGraph, this.layer._postProcesses[i * 2 + 0] as ThinBlurPostProcess));\r\n            this._blurY.push(new FrameGraphBlurTask(`${name} Blur Y${i}`, this._frameGraph, this.layer._postProcesses[i * 2 + 1] as ThinBlurPostProcess));\r\n        }\r\n\r\n        this._clearTask = new FrameGraphClearTextureTask(name + \" Clear Layer\", frameGraph);\r\n        this._clearTask.clearColor = true;\r\n        this._clearTask.clearDepth = true;\r\n\r\n        this._objectRendererTask = new FrameGraphObjectRendererTask(name + \" Render to Layer\", frameGraph, scene, undefined, this.layer.objectRenderer);\r\n        this.layer._renderPassId = this._objectRendererTask.objectRenderer.renderPassId;\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    public override isReady() {\r\n        return this._objectRendererTask.isReady() && this.layer.isLayerReady();\r\n    }\r\n\r\n    public record() {\r\n        if (this.destinationTexture === undefined || this.objectList === undefined || this.camera === undefined) {\r\n            throw new Error(`FrameGrapGlowLayerTask \"${this.name}\": destinationTexture, objectList and camera are required`);\r\n        }\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.destinationTexture);\r\n\r\n        // Uses the layerTexture or creates a color texture to render the glow layer to\r\n        let textureSize: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n        let textureCreationOptions: FrameGraphTextureCreationOptions;\r\n\r\n        let colorLayerOutput: FrameGraphTextureHandle;\r\n\r\n        if (this.layerTexture) {\r\n            colorLayerOutput = this.layerTexture;\r\n            textureCreationOptions = this._frameGraph.textureManager.getTextureCreationOptions(this.layerTexture);\r\n            textureSize = getDimensionsFromTextureSize(textureCreationOptions.size);\r\n            textureCreationOptions.size = textureSize;\r\n        } else {\r\n            textureSize = { width: 50, height: 50 };\r\n            textureCreationOptions = {\r\n                size: textureSize,\r\n                options: {\r\n                    createMipMaps: false,\r\n                    types: [Constants.TEXTURETYPE_UNSIGNED_BYTE],\r\n                    formats: [Constants.TEXTUREFORMAT_RGBA],\r\n                    samples: 1,\r\n                    useSRGBBuffers: [false],\r\n                    creationFlags: [0],\r\n                },\r\n                sizeIsPercentage: true,\r\n            };\r\n            colorLayerOutput = this._frameGraph.textureManager.createRenderTargetTexture(`${this.name} Color`, textureCreationOptions);\r\n        }\r\n\r\n        // Creates a depth texture, used to render objects to the glow layer\r\n        const textureDepthCreationOptions: FrameGraphTextureCreationOptions = {\r\n            size: textureSize,\r\n            options: FrameGraphTextureManager.CloneTextureOptions(textureCreationOptions.options),\r\n            sizeIsPercentage: textureCreationOptions.sizeIsPercentage,\r\n        };\r\n\r\n        textureDepthCreationOptions.options.formats![0] = Constants.TEXTUREFORMAT_DEPTH32_FLOAT;\r\n\r\n        const depthLayerOutput = this._frameGraph.textureManager.createRenderTargetTexture(`${this.name} Depth`, textureDepthCreationOptions);\r\n\r\n        // Clears the textures\r\n        this._clearTask.destinationTexture = colorLayerOutput;\r\n        this._clearTask.depthTexture = depthLayerOutput;\r\n        this._clearTask.color = this.layer.neutralColor;\r\n        this._clearTask.record();\r\n\r\n        // Renders the objects to the layer texture\r\n        this._objectRendererTask.destinationTexture = this._clearTask.outputTexture;\r\n        this._objectRendererTask.depthTexture = this._clearTask.outputDepthTexture;\r\n        this._objectRendererTask.camera = this.camera;\r\n        this._objectRendererTask.objectList = this.objectList;\r\n        this._objectRendererTask.disableShadows = true;\r\n\r\n        this._objectRendererTask.record();\r\n\r\n        // Blurs the layer color texture\r\n        let blurTextureType = 0;\r\n        if (this._engine.getCaps().textureHalfFloatRender) {\r\n            blurTextureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        } else {\r\n            blurTextureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        }\r\n\r\n        textureCreationOptions.options.types![0] = blurTextureType;\r\n\r\n        for (let i = 0; i < this._blurX.length; i++) {\r\n            const blurXTextureHandle = this._frameGraph.textureManager.createRenderTargetTexture(this._blurX[i].name, textureCreationOptions);\r\n\r\n            this._blurX[i].sourceTexture = i === 0 ? this._objectRendererTask.outputTexture : this._blurY[i - 1].outputTexture;\r\n            this._blurX[i].sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n            this._blurX[i].destinationTexture = blurXTextureHandle;\r\n            this._blurX[i].record(true);\r\n\r\n            const blurYTextureHandle = this._frameGraph.textureManager.createRenderTargetTexture(this._blurY[i].name, textureCreationOptions);\r\n\r\n            this._blurY[i].sourceTexture = this._blurX[i].outputTexture;\r\n            this._blurY[i].sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n            this._blurY[i].destinationTexture = blurYTextureHandle;\r\n            this._blurY[i].record(true);\r\n\r\n            textureSize.width = textureSize.width >> 1;\r\n            textureSize.height = textureSize.height >> 1;\r\n        }\r\n\r\n        this._internalDependencies.push(this._blurY[0].outputTexture, this._blurY[1].outputTexture);\r\n\r\n        // Composes the glow layer with the destination texture\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.setRenderTarget(this.outputTexture);\r\n        pass.setExecuteFunc((context) => {\r\n            this.layer.bindTexturesForCompose = (effect: Effect) => {\r\n                context.bindTextureHandle(effect, \"textureSampler\", this._blurY[0].outputTexture);\r\n                context.setTextureSamplingMode(this._blurY[1].destinationTexture!, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n                context.bindTextureHandle(effect, \"textureSampler2\", this._blurY[1].outputTexture);\r\n            };\r\n\r\n            context._applyRenderTarget();\r\n\r\n            this.layer.compose();\r\n        });\r\n\r\n        const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n        passDisabled.setRenderTarget(this.outputTexture);\r\n        passDisabled.setExecuteFunc((_context) => {});\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this._clearTask.dispose();\r\n        this._objectRendererTask.dispose();\r\n        this.layer.dispose();\r\n        for (let i = 0; i < this._blurX.length; i++) {\r\n            this._blurX[i].dispose();\r\n            this._blurY[i].dispose();\r\n        }\r\n        super.dispose();\r\n    }\r\n}\r\n"]}