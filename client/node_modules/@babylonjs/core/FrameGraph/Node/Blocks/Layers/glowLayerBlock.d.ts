import type { Scene, NodeRenderGraphBuildState, FrameGraph, NodeRenderGraphConnectionPoint } from "../../../../index.js";
import { NodeRenderGraphBlock } from "../../nodeRenderGraphBlock";
import { FrameGraphGlowLayerTask } from "../../../Tasks/Layers/glowLayerTask.js";
/**
 * Block that implements the glow layer
 */
export declare class NodeRenderGraphGlowLayerBlock extends NodeRenderGraphBlock {
    protected _frameGraphTask: FrameGraphGlowLayerTask;
    /**
     * Gets the frame graph task associated with this block
     */
    get task(): FrameGraphGlowLayerTask;
    /**
     * Create a new NodeRenderGraphGlowLayerBlock
     * @param name defines the block name
     * @param frameGraph defines the hosting frame graph
     * @param scene defines the hosting scene
     * @param ldrMerge Forces the merge step to be done in ldr (clamp values &gt; 1). Default: false
     */
    constructor(name: string, frameGraph: FrameGraph, scene: Scene, ldrMerge?: boolean);
    private _createTask;
    /** Forces the merge step to be done in ldr (clamp values &gt; 1). Default: false */
    get ldrMerge(): boolean;
    set ldrMerge(value: boolean);
    /** How big is the kernel of the blur texture */
    get blurKernelSize(): number;
    set blurKernelSize(value: number);
    /** The intensity of the glow */
    get intensity(): number;
    set intensity(value: number);
    /**
     * Gets the current class name
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Gets the destination texture input component
     */
    get destination(): NodeRenderGraphConnectionPoint;
    /**
     * Gets the depth texture input component
     */
    get layer(): NodeRenderGraphConnectionPoint;
    /**
     * Gets the camera input component
     */
    get camera(): NodeRenderGraphConnectionPoint;
    /**
     * Gets the objects input component
     */
    get objects(): NodeRenderGraphConnectionPoint;
    /**
     * Gets the dependencies input component
     */
    get dependencies(): NodeRenderGraphConnectionPoint;
    /**
     * Gets the output component
     */
    get output(): NodeRenderGraphConnectionPoint;
    protected _buildBlock(state: NodeRenderGraphBuildState): void;
    protected _dumpPropertiesCode(): string;
    serialize(): any;
    _deserialize(serializationObject: any): void;
}
